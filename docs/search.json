[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by [Phenomenal Eevee] For INFO 2950: Introduction to Data Science at Cornell University. The team is comprised of the following team members.\n\nTeam member 1: Kayla is a Junior studying Information Science and Communication.\nTeam member 2: Joyce is a sophomore studying Information Science and Psychology.\nTeam member 3: Pinxian is a info-sci major junior at CAS.\nTeam member 4: Uyen is a Sophomore majoring in Information Science.\nTeam member 5: Lili Mkrtchyan is a sophomore majoring in cognitive science and information"
  },
  {
    "objectID": "appendices.html",
    "href": "appendices.html",
    "title": "Phenomenal Eevee",
    "section": "",
    "text": "Appendix\n\n# loading packages\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.4     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.1.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.2.0\n✔ recipes      1.0.6     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Dig deeper into tidy modeling with R at https://www.tmwr.org\n\nlibrary(dplyr)\ntv_shows <- read_csv(file = \"data/tv_shows.csv\")\n\nNew names:\nRows: 5368 Columns: 12\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): Title, Age, IMDb, Rotten Tomatoes dbl (8): ...1, ID, Year, Netflix, Hulu,\nPrime Video, Disney+, Type\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n\n# replacing binary numbers to \"yes\" if streaming, \"no\" if not\ntv_shows_cleaned <- tv_shows |>\n  mutate(Netflix = if_else(Netflix == 1, \"Yes\", \"No\"), \n         Hulu = if_else(Hulu == 1, \"Yes\", \"No\"),\n         `Prime Video` = if_else(`Prime Video` == 1, \"Yes\", \"No\"),\n         `Disney+` = if_else(`Disney+` == 1, \"Yes\", \"No\"),\n         `Rotten Tomatoes` = str_remove(`Rotten Tomatoes`, \"/100\"),\n         `Rotten Tomatoes` = parse_integer(`Rotten Tomatoes`)) \n\n# marking exclusive shows\ntv_shows_cleaned|>\n  mutate(exclusive_netflix = Netflix == \"Yes\" & Hulu == \"No\" & `Prime Video` == \"No\" & `Disney+` == \"No\",\n         exclusive_hulu = Hulu == \"Yes\" & Netflix == \"No\" & `Prime Video` == \"No\" & `Disney+` == \"No\",\n         exclusive_prime_video = `Prime Video` == \"Yes\" & Netflix == \"No\" & Hulu == \"No\" & `Disney+` == \"No\",\n         exclusive_disney_plus = `Disney+` == \"Yes\" & Netflix == \"No\" & Hulu == \"No\" & `Prime Video` == \"No\")\n\n# A tibble: 5,368 × 16\n    ...1    ID Title            Year Age   IMDb  `Rotten Tomatoes` Netflix Hulu \n   <dbl> <dbl> <chr>           <dbl> <chr> <chr>             <int> <chr>   <chr>\n 1     0     1 Breaking Bad     2008 18+   9.4/…               100 Yes     No   \n 2     1     2 Stranger Things  2016 16+   8.7/…                96 Yes     No   \n 3     2     3 Attack on Titan  2013 18+   9.0/…                95 Yes     Yes  \n 4     3     4 Better Call Sa…  2015 18+   8.8/…                94 Yes     No   \n 5     4     5 Dark             2017 16+   8.8/…                93 Yes     No   \n 6     5     6 Avatar: The La…  2005 7+    9.3/…                93 Yes     No   \n 7     6     7 Peaky Blinders   2013 18+   8.8/…                93 Yes     No   \n 8     7     8 The Walking De…  2010 18+   8.2/…                93 Yes     No   \n 9     8     9 Black Mirror     2011 18+   8.8/…                92 Yes     No   \n10     9    10 The Queen's Ga…  2020 18+   8.6/…                92 Yes     No   \n# ℹ 5,358 more rows\n# ℹ 7 more variables: `Prime Video` <chr>, `Disney+` <chr>, Type <dbl>,\n#   exclusive_netflix <lgl>, exclusive_hulu <lgl>, exclusive_prime_video <lgl>,\n#   exclusive_disney_plus <lgl>\n\n# print the cleaned data frame\ntv_shows_cleaned\n\n# A tibble: 5,368 × 12\n    ...1    ID Title            Year Age   IMDb  `Rotten Tomatoes` Netflix Hulu \n   <dbl> <dbl> <chr>           <dbl> <chr> <chr>             <int> <chr>   <chr>\n 1     0     1 Breaking Bad     2008 18+   9.4/…               100 Yes     No   \n 2     1     2 Stranger Things  2016 16+   8.7/…                96 Yes     No   \n 3     2     3 Attack on Titan  2013 18+   9.0/…                95 Yes     Yes  \n 4     3     4 Better Call Sa…  2015 18+   8.8/…                94 Yes     No   \n 5     4     5 Dark             2017 16+   8.8/…                93 Yes     No   \n 6     5     6 Avatar: The La…  2005 7+    9.3/…                93 Yes     No   \n 7     6     7 Peaky Blinders   2013 18+   8.8/…                93 Yes     No   \n 8     7     8 The Walking De…  2010 18+   8.2/…                93 Yes     No   \n 9     8     9 Black Mirror     2011 18+   8.8/…                92 Yes     No   \n10     9    10 The Queen's Ga…  2020 18+   8.6/…                92 Yes     No   \n# ℹ 5,358 more rows\n# ℹ 3 more variables: `Prime Video` <chr>, `Disney+` <chr>, Type <dbl>\n\n# count exclusive shows to each platform\nnum_netflix_exclusive <- sum(tv_shows_cleaned$exclusive_netflix == TRUE)\n\nWarning: Unknown or uninitialised column: `exclusive_netflix`.\n\nnum_hulu_exclusive <- sum(tv_shows_cleaned$exclusive_hulu == TRUE)\n\nWarning: Unknown or uninitialised column: `exclusive_hulu`.\n\nnum_prime_video_exclusive <- sum(tv_shows_cleaned$exclusive_prime_video == TRUE)\n\nWarning: Unknown or uninitialised column: `exclusive_prime_video`.\n\nnum_disney_plus_exclusive <- sum(tv_shows_cleaned$exclusive_disney_plus == TRUE)\n\nWarning: Unknown or uninitialised column: `exclusive_disney_plus`.\n\n# print the number of exlusive shows to each platform\nnum_netflix_exclusive\n\n[1] 0\n\nnum_hulu_exclusive\n\n[1] 0\n\nnum_prime_video_exclusive\n\n[1] 0\n\nnum_disney_plus_exclusive\n\n[1] 0\n\n\n\n# make a copy of the cleaned data frame\ntv_shows_cleaned_copy <- tv_shows_cleaned\n\n# filter only shows streaming on Netflix\nnetflix <- filter(tv_shows_cleaned_copy, Netflix == \"Yes\")\nnames(netflix)[7] <- \"rotten_tomatoes\"\n\n# categorize score intervals into deciles\nnetflix <- netflix |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'netflix') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\n# filter only the Hulu shows  \nhulu <- filter(tv_shows_cleaned_copy, Hulu == \"Yes\")\nnames(hulu)[7] <- \"rotten_tomatoes\"\n\n# categorize score intervals into deciles\nhulu <- hulu |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'hulu') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\n# filter only shows streaming on Prime Video\nnames(tv_shows_cleaned_copy)[10] <- \"prime_video\"\nprime <- filter(tv_shows_cleaned_copy, prime_video == \"Yes\")\nnames(prime)[7] <- \"rotten_tomatoes\"\n\n# categorize score intervals into deciles\nprime <- prime |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'prime') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\n# filter shows streaming on Netflix\nnames(tv_shows_cleaned_copy)[11] <- \"disney_plus\"\ndisney <- filter(tv_shows_cleaned_copy, disney_plus == \"Yes\")\nnames(disney)[7] <- \"rotten_tomatoes\"\n\n# categorize score intervals into deciles\ndisney <- disney |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'disney') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\n# add all the shows streaming for all 4 platforms together\ntotal <- rbind(netflix, hulu)\ntotal <- rbind(total,prime)\ntotal <- rbind(total,disney)\n\n# count the number of shows in each decile interval for rotten tomatoes score\ntotal_per_platform <- total |>\n  group_by(decile, platform) |>\n  summarize(number = n())\n\n`summarise()` has grouped output by 'decile'. You can override using the\n`.groups` argument.\n\n# calculate the mean ranking of shows streaming on each platform\nmean_rankings <- data.frame(platform = c('Netflix',\n                                         'Hulu','Amazon Prime',\n                                         'Disney'),\n                            mean=c(netflix[[3]][1], hulu[[3]][1],\n                                   prime[[3]][1],  disney[[3]][1]))\n\n\n\n{r} # write_csv(x = tv_shows_cleaned, file = \"~/project-phenomenal-evee/appendices.qmd\") #"
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "Phenomenal Eevee",
    "section": "",
    "text": "Research question(s)\nWhat streaming platform presents the highest-ranked television shows produced in the last century? \n\nWe define “highest-ranked” as shows with the highest Rotten Tomatoes ranking \nThe streaming platforms we are analyzing are Disney+, Netflix, Hulu, and Prime Video.\n\n\n\nData collection and cleaning\nHave an initial draft of your data cleaning appendix. Document every step that takes your raw data file(s) and turns it into the analysis-ready data set that you would submit with your final project. Include text narrative describing your data collection (downloading, scraping, surveys, etc) and any additional data curation/cleaning (merging data frames, filtering, transformations of variables, etc). Include code for data curation/cleaning, but not collection.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n✔ broom        1.0.4     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.1.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.2.0\n✔ recipes      1.0.6     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(dplyr)\n\ntv_shows <- read_csv(file = \"data/tv_shows.csv\")\n\nNew names:\nRows: 5368 Columns: 12\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(4): Title, Age, IMDb, Rotten Tomatoes dbl (8): ...1, ID, Year, Netflix, Hulu,\nPrime Video, Disney+, Type\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -> `...1`\n\ntv_shows_cleaned <- tv_shows %>%\n  select(-1:-2, -6, -ncol(.)) %>%\n  mutate(Netflix = if_else(Netflix == 1, \"Yes\", \"No\"), \n         Hulu = if_else(Hulu == 1, \"Yes\", \"No\"),\n         `Prime Video` = if_else(`Prime Video` == 1, \"Yes\", \"No\"),\n         `Disney+` = if_else(`Disney+` == 1, \"Yes\", \"No\"),\n         `Rotten Tomatoes` = str_remove(`Rotten Tomatoes`, \"/100\"),\n         `Rotten Tomatoes` = parse_integer(`Rotten Tomatoes`)) \n\nnames(tv_shows_cleaned)[4] = 'rotten_tomatoes'\nnames(tv_shows_cleaned)[7] = 'prime_video'\nnames(tv_shows_cleaned)[8] = 'disney_plus'\n        \ntv_shows_cleaned\n\n# A tibble: 5,368 × 8\n   Title        Year Age   rotten_tomatoes Netflix Hulu  prime_video disney_plus\n   <chr>       <dbl> <chr>           <int> <chr>   <chr> <chr>       <chr>      \n 1 Breaking B…  2008 18+               100 Yes     No    No          No         \n 2 Stranger T…  2016 16+                96 Yes     No    No          No         \n 3 Attack on …  2013 18+                95 Yes     Yes   No          No         \n 4 Better Cal…  2015 18+                94 Yes     No    No          No         \n 5 Dark         2017 16+                93 Yes     No    No          No         \n 6 Avatar: Th…  2005 7+                 93 Yes     No    Yes         No         \n 7 Peaky Blin…  2013 18+                93 Yes     No    No          No         \n 8 The Walkin…  2010 18+                93 Yes     No    No          No         \n 9 Black Mirr…  2011 18+                92 Yes     No    No          No         \n10 The Queen'…  2020 18+                92 Yes     No    No          No         \n# ℹ 5,358 more rows\n\n\nThe first step is to load required packages: tidyverse, tidymodels, and dplyr.\nAfter loading the packages, the tv_shows.csv file is read into a data frame tv_shows using the read_csv function from the tidyverse package. The next step is data cleaning, which involves selecting columns and renaming them. The select function from dplyr package is used to remove columns that are not needed, specifically the first two columns (-1:-2), the sixth column (-6), and the last column (-ncol(.)). Then for Rotten Tomatoes we remove the string % symbol by the using str_remove and convert the values to integers by using parse_integer.The column names are also renamed to make them more readable by replacing spaces with underscores and lowercase.\nThe third step is to convert binary variables (0/1) to Yes/No. This is done using the if_else function from dplyr. For each of the four streaming platforms (Netflix, Hulu, Prime Video, Disney+), if the value is 1, the platform is available (\"Yes\") and if the value is 0, the platform is not available (\"No\").\nThe final cleaned data frame is stored in a new data frame called tv_shows_cleaned.\n\n\nData description\nHave an initial draft of your data description section. Your data description should be about your analysis-ready data.\nThe observations (rows) of the tvshows data set represents each individual TV show that is readily watched and broadcasted on at least one of the four top ranking broadcasting platforms (we are focusing on Hulu, Disney+, Prime Video and Netflix). The attributes (columns) of the tvshows data set categorizes each individual TV show based on the streaming platform it’s being broadcasted on and reveals additional information. This includes revealing the year the TV show was produced, target age group of audience, and the rating of the show (by the Rotten Tomatoes metric). This data set was created by the curator after being inspired by personal experiences of wanting to know more about which streaming platform(s) a particular TV show can be found on. Furthermore, the curator wished to explore potential relationships between target age group of audience, year of production, and the streaming platform the show can be found on. The creation of the tvshows data set was not funded by anyone and was curated solely with the desire to learn more about TV shows readily broadcasted on top streaming platforms. Specifically, the curator likely looked at TV shows broadcasted on each streaming platform to determine which Rotten Tomatoes ratings to include within the data set and determine which year of production data as well as target age of audience should be included. In regards to the pre-processing of the data, the Rotten Tomatoes score itself needed to undergo specific calculations before the curator is able to scrape the Rotten Tomatoes score for the corresponding TV shows. To summarize, the Rotten Tomatoes score is calculated only when the show receives at least 5 reviews. Then, the critic’s rating of “Fresh” (positive) or “Rotten” bad is collected and the Rotten Tomatoes percentage is calculated by dividing the number of “Fresh” scores by the total number of “Fresh” and “Rotten” scores times 100. In addition, the curator then used a binary system (0 for “no” and 1 for “yes”) to classify which streaming platform(s) each TV show can be found on. The curator did not involve any other people during the data collection and likely collected the data from official sites that reported the taken corresponding data values. At the same time, the Rotten Tomatoes data values inherently involve people as the score is reliant on people’s opinions and rating of the show. From this perspective, the people are likely aware of this data collection as they are displaying their ratings of the TV shows in a public domain. They likely expected their data to be used to contribute to the overall rating of the TV show and used to inform others on whether they should watch the respective TV show. \n\n\nData limitations\nIdentify any potential problems with your dataset.\nThe first limitation is that the data contains many null values in the “ages” and “IMDb” columns. It is possible that the shows with missing IMDb scores are shows that aren’t popular and didn’t receive enough ratings to show a score. If we remove the null values, we might miss some interesting discoveries or unintentionally create some biases.\nThe second limitation is the lack of some interesting variables. For example, there is no “genre” column. If we have some kind of variable to describe the type or genre of the show, we could have discovered some platforms where shows of a particular genre are higher rated than others. In addition, if there is a variable “language”, we could look at which platform provides the most diverse range of highly rated shows.\nThe third limitation is the TV show platforms included in the data. Some other popular streaming services, such as Paramount + and HBO +, are not included. Missing those platforms could limit the scale of discoveries.\nThe fourth limitation is the age of the dataset. According to Kaggle, the dataset was created 2 years ago. This is reflected by the latest year of show, 2021, in the data.\n\n\nExploratory data analysis\nPerform an (initial) exploratory data analysis.\n\n# descriptive statistics\n\nnetflix <- filter(tv_shows_cleaned, Netflix == \"Yes\")\nnetflix <- netflix |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'netflix') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n  \n\nhulu <- filter(tv_shows_cleaned, Hulu == \"Yes\")\nhulu <- hulu |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'hulu') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\nprime <- filter(tv_shows_cleaned, prime_video == \"Yes\")\nprime <- prime |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'prime') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\ndisney <- filter(tv_shows_cleaned, disney_plus == \"Yes\")\ndisney <- disney |>\n  select(Title, rotten_tomatoes) |>\n  mutate(mean = mean(rotten_tomatoes)) |>\n  mutate(platform = 'disney') |>\n  mutate(decile = 100) |>\n  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, \n                         '1-10', decile)) |>\n  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, \n                         '11-20', decile)) |>\n  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, \n                         '21-30', decile)) |>\n  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, \n                         '31-40', decile)) |>\n  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, \n                         '51-60', decile)) |>\n  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, \n                         '61-70', decile)) |>\n  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, \n                         '71-80', decile)) |>\n  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, \n                         '81-90', decile)) |>\n  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, \n                         '91-100', decile))\n\ntotal <- rbind(netflix, hulu)\ntotal <- rbind(total,prime)\ntotal <- rbind(total,disney)\n\n\ntotal_per_platform <- total |>\n  group_by(decile, platform) |>\n  summarize(number = n())\n\n`summarise()` has grouped output by 'decile'. You can override using the\n`.groups` argument.\n\nmean_rankings <- data.frame(platform = c('Netflix',\n                                         'Hulu','Amazon Prime',\n                                         'Disney'),\n                            mean=c(netflix[[3]][1], hulu[[3]][1],\n                                   prime[[3]][1],  disney[[3]][1]))\n\n\n\n\ntotal_per_platform |>\n  ggplot(aes(x = decile, y = number, fill = platform)) +\n  geom_bar(position = \"fill\", stat = \"identity\") +\n  scale_color_viridis_d(option = \"D\", end = 0.8) +\n  theme_minimal() +\n  labs(\n    title = \"Percent of shows that fall under a given decile for each platform\",\n      x = \"Decile\", y = \"Fraction of shows\", \n    fill = \"Platforms\", disnay = \"Disney+\") +\n  scale_fill_discrete(labels = c(\"Disney+\", \"Hulu\",\n                                 \"Netflix\", \"Prime Video\"))\n\n\n\ntotal |>\n  ggplot(aes(x = platform, y = rotten_tomatoes)) + \n  geom_boxplot() +\n  labs(title = \"Ratings of Streamed Shows by Platform\", \n       x = \"Platforms\", y = \"Show Ratings\")\n\n\n\nmean_rankings |>\n  ggplot(aes(x = platform, y = mean)) + ylim(c(0, 100)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Ratings of Streamed Shows by Platform\",\n       x = \"Platforms\", y = \"Mean Ratings\")\n\n\n\n\n\n\nQuestions for reviewers\nList specific questions for your peer reviewers and project mentor to answer in giving you feedback on this phase.\n1. Is the research question clearly stated and does it align with the data collected and analyzed? Is it interesting and relevant?\n2. Are the data collection methods and sources clearly describes? Are there any gaps or limitations in the data?\n3. Is the data cleaning process clearly explained and well-documented? Are there any concerns or issues with the data cleaning? Are there any missing outliers or inconsistencies? How were they handled?\n4. Are the summary statistics and plots relevant to the research question? Are they clearly presented and explained?\n5. Are there any potential confounding variables or biases that should be considered in the analysis?\n6. Are there any additional analyses or visualizations that could be helpful in exploring the data further?\n7. Is the exploration data analysis comprehensive and well-organized?\n8. Are there any areas where more explainations or detail would be helpful in understanding the analysis?\n9. Are the plots informative and well-designed? Do they represent any insights or relationships in the data? Are they appropriate for the type of data and the research questions?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "TEAM NAME",
    "section": "",
    "text": "Add project abstract here."
  },
  {
    "objectID": "pre-registration.html",
    "href": "pre-registration.html",
    "title": "Phenomenal Eevee",
    "section": "",
    "text": "Analysis #1\nFor our first analysis we will conduct hypothesis testing to examine the quality of exclusive versus non-exclusive shows to a specific platform for each platform separately.\nRQ: Is the quality of exclusive shows different from non-exclusive shows in a specific platform, for each platform separately?\nMore specifically, we will conduct hypothesis testing to compare the quality (rotten tomato ranking) of Netflix’s exclusive shows versus shows non-exclusive to Netflix only, Hulu’s exclusive shows versus the shows on Hulu that are not exclusive to Hulu, Disney’s exclusive shows versus shows that are not exclusive to Disney, and Prime Video’s exclusive shows versus the shows on Prime Video that are not exclusive to Prime Video, separately.\nOur null hypothesis is that on each platform we will observe that the exclusive shows outperform the non-exclusive shows on that specific platform. Our alternative hypothesis is that the non-exclusive shows outperform the exclusive shows on a given platform, for each platform separately. These are one-sided directional hypotheses that would allow us to explore the relationship between the exclusivity of the shows to a given platform and their rankings on rotten tomatoes (based on which we define our measures of quality). If our null hypothesis is indeed true, that would give us a basis to justify that choosing exclusive shows to compare across all four platforms is objectively a better measure to analyze which streaming platform has the highest quality shows.\n\n\nAnalysis #2\nRQ: Are exclusive shows’ ratings different between the four platforms (Netflix, Hulu, Disney+, and Prime Video)?\nOur second analysis will be two-fold. To begin, we will conduct a hypothesis test in which we will examine the differences (or lack thereof) in exclusive shows’ ratings between all four platforms (Netflix, Hulu, Disney+, and Prime Video). As such, we propose two hypotheses: our null hypothesis is that there is no difference in quality (indicated by the shows’ Rotten Tomatoes score) between the platforms, and our alternative hypothesis is that there is a difference between the platforms. If we reject our null hypothesis, we will perform a two-sided directionality test to determine which platform outperforms the others (based on Rotten Tomato scores). This will ultimately help us answer the research question that we put forward: What platform presents the best-quality, exclusive television shows?\nExclusive show rating comparison between all 4 platforms\nNull : there is no difference in quality between the 4 platforms\nAlternative: there is some sort of difference between the 4 platforms"
  },
  {
    "objectID": "presentation.html#our-topic-streaming-wars",
    "href": "presentation.html#our-topic-streaming-wars",
    "title": "Streaming Wars",
    "section": "Our Topic: Streaming Wars",
    "text": "Our Topic: Streaming Wars\nOur Motivation:\n\n\nStreaming platforms have taken the world by storm due to their convenience and ability to house innumerable popular television shows and movies. As these mediums continue to grow in popularity, discourse about them is also developing and is often centered around one primary question: Which platform is best?\nWe have taken an in-depth look at four mainstream services —- Netflix, Amazon Prime Video, Hulu, and Disney+ —- the quality of their programs, measured in Rotten Tomatoes scores.\nOur Research Questions:\nRQ1: “Is the quality of exclusive shows different from non-exclusive shows in each respective platform?”\nRQ2: “Are exclusive shows’ ratings different between the four platforms (Netflix, Hulu, Disney+, and Prime Video)?”"
  },
  {
    "objectID": "presentation.html#introducing-the-data",
    "href": "presentation.html#introducing-the-data",
    "title": "Streaming Wars",
    "section": "Introducing the Data",
    "text": "Introducing the Data\n\n\nOriginal Dataset Characteristics\n\nThe original dataset contains 12 columns and 5368 observations.\nThe observations (rows) represents each individual TV show readily watched and broadcasted on at least one of the four top ranking broadcasting platforms (Hulu, Disney+, Prime Video and Netflix).\nThe attributes (columns) categorizes each individual TV show based on the streaming platform it’s being broadcasted on and reveals additional information. This includes revealing the year the TV show was produced, target age group, whether show is streamed on a specific platfom, and rating of the show (Rotten Tomatoes and IMDB metrics).\n\nData Cleaning\n\nRemoved ‘%’ in the Rotten Tomatoes and converted the values to integers\nColumn Names were renamed following best practices\nConverted binary variables Netflix, Hulu, Prime Video, Disney+ into “Yes” and “No”\nMutated to add logical (bool) data columns that specifies (non)exclusive tv shows on each of the 4 streaming platforms.\n\n\n\n\n\n# A tibble: 10 × 10\n   Title                 `Rotten Tomatoes` Netflix Hulu  `Prime Video` `Disney+`\n   <chr>                             <int> <chr>   <chr> <chr>         <chr>    \n 1 Breaking Bad                        100 Yes     No    No            No       \n 2 Stranger Things                      96 Yes     No    No            No       \n 3 Attack on Titan                      95 Yes     Yes   No            No       \n 4 Better Call Saul                     94 Yes     No    No            No       \n 5 Dark                                 93 Yes     No    No            No       \n 6 Avatar: The Last Air…                93 Yes     No    Yes           No       \n 7 Peaky Blinders                       93 Yes     No    No            No       \n 8 The Walking Dead                     93 Yes     No    No            No       \n 9 Black Mirror                         92 Yes     No    No            No       \n10 The Queen's Gambit                   92 Yes     No    No            No       \n# ℹ 4 more variables: exclusive_netflix <lgl>, exclusive_hulu <lgl>,\n#   exclusive_prime_video <lgl>, exclusive_disney_plus <lgl>"
  },
  {
    "objectID": "presentation.html#highlights-from-eda",
    "href": "presentation.html#highlights-from-eda",
    "title": "Streaming Wars",
    "section": "Highlights from EDA",
    "text": "Highlights from EDA"
  },
  {
    "objectID": "presentation.html#hypothesis-test-1",
    "href": "presentation.html#hypothesis-test-1",
    "title": "Streaming Wars",
    "section": "Hypothesis Test #1",
    "text": "Hypothesis Test #1\n\n\nRQ #1: Is the quality of exclusive shows in the four platforms different from non-exclusive shows?\n\n\n\n\n\n\n\n\n\nNull Hypothesis: The average Rotten Tomatoes score of exclusive shows is less than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.\n\\[\nH_0: \\mu_{exclusive} < \\mu_{non-exclusive}\n\\]\n\nAlternate Hypothesis: The average Rotten Tomatoes score of exclusive shows is greater than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.\n\\[\nH_A: \\mu_{exclusive} > \\mu_{non-exclusive}\n\\]\n\n\nResult: p-value = 0.001, we reject the null hypothesis."
  },
  {
    "objectID": "presentation.html#hypothesis-test-2",
    "href": "presentation.html#hypothesis-test-2",
    "title": "Streaming Wars",
    "section": "Hypothesis Test #2",
    "text": "Hypothesis Test #2\n\n\nRQ #2: Are exclusive shows’ ratings different between the four platforms?\n\n\nNull Hypothesis: There is no difference in quality of the exclusive shows between the four platforms.\n\\[\nH_0: μ1 = μ2 = μ3 = μ4\n\\]\n\nAlternate Hypothesis: There is a difference in quality of the exclusive shows between the four platforms.\n\\[\nH_A: μ1 ≠ μ2 ≠ μ3 ≠ μ4\n\\]\n\n\n\n\n\n\n\n\n\nResults: Point Estimates: Intercept (52.75), Exclusive: Disney+ (-4.60), Hulu (-1.56), Prime Video (-17.86) P-Values: Intercept (0.001), Exclusive: Disney+ (0.001), Hulu (0.02), Prime Video (0.001)"
  },
  {
    "objectID": "presentation.html#conclusions-future-work",
    "href": "presentation.html#conclusions-future-work",
    "title": "Streaming Wars",
    "section": "Conclusions & Future Work",
    "text": "Conclusions & Future Work\n\n\nConclusion:\n\nTo sum it up, the data provides sufficient evidence that exclusive shows on the four platforms tend to have greater average Rotten Tomatoes ratings than non-exclusive shows on those platforms.\nAccording to the study, there appears to be a difference in the quality of exclusive programs offered by the four platforms, as evidenced by their Rotten Tomatoes ratings. Netflix, Hulu, and Disney Plus has similar average exclusive show quality, while Prime Video’s are significantly lower.\n\nFuture work:\n\nExplore other measures of quality for exclusive shows and non-exclusive shows on each platform, potentailly combining ratings from multiple website to form a more objective measurement of quality.\nConsider other factors that may influence the perceived quality of content, such as viewership, preferences, and number of subscribers.\nInclude more variables in the dataset by joining, in order to rule out confounding variables that might create biases."
  },
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "Project title",
    "section": "",
    "text": "library(tidyverse)\nlibrary(skimr)\nlibrary(dplyr)"
  },
  {
    "objectID": "proposal.html#introduction-and-data",
    "href": "proposal.html#introduction-and-data",
    "title": "Project title",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\nKaggle: Spotify Tracks Dataset\nSource: https://www.kaggle.com/datasets/maharshipandya/-spotify-tracks-dataset?resource=download\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\nThe data was collected and cleansed using Spotify’s web API and Python by the original data curator.\nWrite a brief description of the observations.\nEach observation is a song. Each row contains the id, artist, album name, song name, popularity, duration, explicitness, rating of danceability, rating of energy, key, loudness, mode, speechness, acousticness, instrumentalness, liveness, valence, tempo, time signature, and track genre of the song on Spotify. There are 114000 observations and 21 columns in the dataset."
  },
  {
    "objectID": "proposal.html#research-question",
    "href": "proposal.html#research-question",
    "title": "Project title",
    "section": "Research question",
    "text": "Research question\n\nA well formulated research question. (You may include more than one research question if you want to receive feedback on different ideas for your project. However, one per data set is required.)\n\nAre the most popular songs on Spotify more danceable?\nAre the most popular songs on Spotify longer in duration?\nWhat genre are the most popular songs on Spotify?\n\nA description of the research topic along with a concise statement of your hypotheses on this topic.\nMusic is an integral enterprise to our daily life. Whether it be listening to the radio or attending a concert, we experience different types of music at frequent rates. Thus, it’s interesting to explore what makes different songs popular; we are especially interested in danceability, duration, and genre. Currently, we hypothesize that the most popular songs on Spotify are highly danceable, short, pop songs.\nIdentify the types of variables in your research question. Categorical? Quantitative?\n\nTrack_id: Qualitative - description\nArtists: Qualitative- descriptive\nDuration: Quantitative\nAlbum_name: Qualitative - descriptive\nTrack_name: Qualitative- descriptive\nPopularity: Quantitative\nDanceability: Quantitative\nTrack_genre: Categorical"
  },
  {
    "objectID": "proposal.html#glimpse-of-data",
    "href": "proposal.html#glimpse-of-data",
    "title": "Project title",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\nspotify <- read.csv(\"data/dataset.csv\")\n\nskimr::skim(spotify)\n\n\nData summary\n\n\nName\nspotify\n\n\nNumber of rows\n114000\n\n\nNumber of columns\n21\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n15\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntrack_id\n0\n1\n22\n22\n0\n89741\n0\n\n\nartists\n0\n1\n0\n513\n1\n31438\n0\n\n\nalbum_name\n0\n1\n0\n243\n1\n46590\n0\n\n\ntrack_name\n0\n1\n0\n511\n1\n73609\n0\n\n\nexplicit\n0\n1\n4\n5\n0\n2\n0\n\n\ntrack_genre\n0\n1\n3\n17\n0\n114\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nX\n0\n1\n56999.50\n32909.11\n0.00\n28499.75\n56999.50\n85499.25\n113999.00\n▇▇▇▇▇\n\n\npopularity\n0\n1\n33.24\n22.31\n0.00\n17.00\n35.00\n50.00\n100.00\n▇▇▇▃▁\n\n\nduration_ms\n0\n1\n228029.15\n107297.71\n0.00\n174066.00\n212906.00\n261506.00\n5237295.00\n▇▁▁▁▁\n\n\ndanceability\n0\n1\n0.57\n0.17\n0.00\n0.46\n0.58\n0.70\n0.98\n▁▃▇▇▂\n\n\nenergy\n0\n1\n0.64\n0.25\n0.00\n0.47\n0.69\n0.85\n1.00\n▂▃▅▆▇\n\n\nkey\n0\n1\n5.31\n3.56\n0.00\n2.00\n5.00\n8.00\n11.00\n▇▃▃▅▆\n\n\nloudness\n0\n1\n-8.26\n5.03\n-49.53\n-10.01\n-7.00\n-5.00\n4.53\n▁▁▁▇▆\n\n\nmode\n0\n1\n0.64\n0.48\n0.00\n0.00\n1.00\n1.00\n1.00\n▅▁▁▁▇\n\n\nspeechiness\n0\n1\n0.08\n0.11\n0.00\n0.04\n0.05\n0.08\n0.96\n▇▁▁▁▁\n\n\nacousticness\n0\n1\n0.31\n0.33\n0.00\n0.02\n0.17\n0.60\n1.00\n▇▂▂▂▂\n\n\ninstrumentalness\n0\n1\n0.16\n0.31\n0.00\n0.00\n0.00\n0.05\n1.00\n▇▁▁▁▁\n\n\nliveness\n0\n1\n0.21\n0.19\n0.00\n0.10\n0.13\n0.27\n1.00\n▇▃▁▁▁\n\n\nvalence\n0\n1\n0.47\n0.26\n0.00\n0.26\n0.46\n0.68\n1.00\n▆▇▇▇▅\n\n\ntempo\n0\n1\n122.15\n29.98\n0.00\n99.22\n122.02\n140.07\n243.37\n▁▃▇▃▁\n\n\ntime_signature\n0\n1\n3.90\n0.43\n0.00\n4.00\n4.00\n4.00\n5.00\n▁▁▁▇▁"
  },
  {
    "objectID": "proposal.html#introduction-and-data-1",
    "href": "proposal.html#introduction-and-data-1",
    "title": "Project title",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\n\nKaggle: “TV shows on Netflix, Prime Video, Hulu, and Disney+”\nhttps://www.kaggle.com/datasets/ruchi798/tv-shows-on-netflix-prime-video-hulu-and-disney\n\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\n\nThe data was collected and uploaded in 2021. The curator scraped the available television shows during that time from Netflix, Prime Video, Hulu, and Disney+ and uploaded them to this data set.\n\nWrite a brief description of the observations.\n\nWe have 12 columns and 5368 observations. The columns are the titles of the show (string), whether the show is streamed on Hulu, Disney+, Prime Video, or Netflix, the ranking of the show (integer out of 100), the year it was produced, the target age group (string). We have 1 if the show is streamed on a specific platform, and 0 otherwise. All the shows have a unique identifier."
  },
  {
    "objectID": "proposal.html#research-question-1",
    "href": "proposal.html#research-question-1",
    "title": "Project title",
    "section": "Research question",
    "text": "Research question\n\nA well formulated research question. (You may include more than one research question if you want to receive feedback on different ideas for your project. However, one per data set is required.)\n\nWhat platform presents the best-quality television shows for each age-group?\n\nA description of the research topic along with a concise statement of your hypotheses on this topic.\n\nAs streaming platforms continue to grow in popularity, discourse about which platform is best seems to be taking place at an increasingly frequent rate. As such, we’re interested in learning about platforms’ television offerings per age group (especially ours!). In order to address this interest, we’re intending on looking at the IMDb and/or Rotten Tomatoes scores (indicating TV quality), age group, and platform for each TV show; we can analyze the research question with these particular variables. Currently, we hypothesize that Netflix will have the highest-quality TV shows for most age groups.\n\nIdentify the types of variables in your research question. Categorical? Quantitative?\n\nRow ID: Quantitative\nUnique TV ID: Quantitative\nTitle: Qualitative - Descriptive\nYear: Quantitative\nAge: Categorical\nIMDb Rating: Quantitative\nRotten Tomatoes Rating: Quantitative\nNetflix: Categorical\nHulu: Categorical\nPrime Video: Categorical\nDisney+: Categorical\nType: Categorical\nNOTE: Some of these variables might be filtered out/manipulated in our cleaned data set; the above list represents the variables in their original form."
  },
  {
    "objectID": "proposal.html#glimpse-of-data-1",
    "href": "proposal.html#glimpse-of-data-1",
    "title": "Project title",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\ntvshows <- read.csv(\"data/tv_shows.csv\")\n\nskimr::skim(tvshows)\n\n\nData summary\n\n\nName\ntvshows\n\n\nNumber of rows\n5368\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nnumeric\n8\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nTitle\n0\n1\n1\n77\n0\n5368\n0\n\n\nAge\n0\n1\n0\n3\n2127\n6\n0\n\n\nIMDb\n0\n1\n0\n6\n962\n79\n0\n\n\nRotten.Tomatoes\n0\n1\n6\n7\n0\n85\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nX\n0\n1\n2683.50\n1549.75\n0\n1341.75\n2683.5\n4025.25\n5367\n▇▇▇▇▇\n\n\nID\n0\n1\n2814.95\n1672.39\n1\n1345.75\n2788.0\n4308.25\n5717\n▇▇▇▇▇\n\n\nYear\n0\n1\n2012.63\n10.14\n1904\n2011.00\n2016.0\n2018.00\n2021\n▁▁▁▁▇\n\n\nNetflix\n0\n1\n0.37\n0.48\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▅\n\n\nHulu\n0\n1\n0.30\n0.46\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▃\n\n\nPrime.Video\n0\n1\n0.34\n0.47\n0\n0.00\n0.0\n1.00\n1\n▇▁▁▁▅\n\n\nDisney.\n0\n1\n0.07\n0.25\n0\n0.00\n0.0\n0.00\n1\n▇▁▁▁▁\n\n\nType\n0\n1\n1.00\n0.00\n1\n1.00\n1.0\n1.00\n1\n▁▁▇▁▁"
  },
  {
    "objectID": "proposal.html#introduction-and-data-2",
    "href": "proposal.html#introduction-and-data-2",
    "title": "Project title",
    "section": "Introduction and data",
    "text": "Introduction and data\n\nIdentify the source of the data.\n\nKaggle: “Data Science Job Salaries”\nhttps://www.kaggle.com/datasets/ruchi798/data-science-job-salaries\n\nState when and how it was originally collected (by the original data curator, not necessarily how you found the data).\n\nThe data was collected and uploaded in 2022.\n\nWrite a brief description of the observations.\n\nThe data has 606 observations with 12 columns. The columns represent the work year, experience level, employment type, job title, salary, salary currency, salary in USD, employee’s place of residence, company size, company location, and the remote ratio. Each observation represents an employee with the information about their job on those columns above."
  },
  {
    "objectID": "proposal.html#research-question-2",
    "href": "proposal.html#research-question-2",
    "title": "Project title",
    "section": "Research question",
    "text": "Research question\n\nA well formulated research question. (You may include more than one research question if you want to receive feedback on different ideas for your project. However, one per data set is required.)\n\nWhich job title/industry has the highest average salary from 2020-2022?\nWhat is the average salary for all (or specific) experience levels in small, medium, and large companies?\n\nPotential Question to explore: What is the highest average salary that an EN (entry level/junior level) employee can expect to earn (based on small, medium, or large company)?\n\nWhat are the most popular job titles in the data science industry?\nWhich experience level is most common in the industry?\nWhich region is where most employees come from (sorted based on experience level)?\nWhich experience level is most common among employees in each job title?\n\nA description of the research topic along with a concise statement of your hypotheses on this topic.\n\nAs budding Information Science majors, we look at data science to be a promising field to base our future careers in. We’re interested to learn more about how the average salary has changed over the last couple of years within the industry and how experience levels influence the salary within popular data science job titles. To explore this in greater detail, we plan to analyze salary trends over time based on varying experience levels and company sizes. Other variables can also be used to explore the host of questions mentioned above. (For the first question on the list) We hypothesize that data science in the tech industry will likely have the highest average salary. (For the second question on the list) We hypothesize that the average salary for EX (executive level/director) experienced employees at large companies will be the highest.\n\nIdentify the types of variables in your research question. Categorical? Quantitative?\n\nEmployee_ID: Quantitative\nWork_year: Quantitative\nExperience_level: Categorical\nEmployment_type: Categorical\nJob_title: Categorical\nSalary: Quantitative\nSalary_in_usd: Quantitative\nRemote_ratio: Quantitative\nCompany_location: Categorical\nCompany_size: Categorical"
  },
  {
    "objectID": "proposal.html#glimpse-of-data-2",
    "href": "proposal.html#glimpse-of-data-2",
    "title": "Project title",
    "section": "Glimpse of data",
    "text": "Glimpse of data\n\nds_salary <- read.csv(\"data/ds_salaries.csv\") \n\nskimr::skim(ds_salary)\n\n\nData summary\n\n\nName\nds_salary\n\n\nNumber of rows\n607\n\n\nNumber of columns\n12\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n7\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nexperience_level\n0\n1\n2\n2\n0\n4\n0\n\n\nemployment_type\n0\n1\n2\n2\n0\n4\n0\n\n\njob_title\n0\n1\n11\n40\n0\n50\n0\n\n\nsalary_currency\n0\n1\n3\n3\n0\n17\n0\n\n\nemployee_residence\n0\n1\n2\n2\n0\n57\n0\n\n\ncompany_location\n0\n1\n2\n2\n0\n50\n0\n\n\ncompany_size\n0\n1\n1\n1\n0\n3\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nX\n0\n1\n303.00\n175.37\n0\n151.5\n303\n454.5\n606\n▇▇▇▇▇\n\n\nwork_year\n0\n1\n2021.41\n0.69\n2020\n2021.0\n2022\n2022.0\n2022\n▂▁▆▁▇\n\n\nsalary\n0\n1\n324000.06\n1544357.49\n4000\n70000.0\n115000\n165000.0\n30400000\n▇▁▁▁▁\n\n\nsalary_in_usd\n0\n1\n112297.87\n70957.26\n2859\n62726.0\n101570\n150000.0\n600000\n▇▅▁▁▁\n\n\nremote_ratio\n0\n1\n70.92\n40.71\n0\n50.0\n100\n100.0\n100\n▂▁▂▁▇"
  },
  {
    "objectID": "report.html",
    "href": "report.html",
    "title": "Phenomenal Eevee",
    "section": "",
    "text": "Introduction\nStreaming platforms have taken the world by storm due to their convenience and ability to house innumerable popular television shows and movies. As these mediums continue to grow in popularity, discourse about them is also developing and is often centered around one primary question: Which platform is best? Throughout our data analysis, our team seeks to answer this aforementioned question to the best of our ability, taking an in-depth look at four mainstream services —- Netflix, Amazon Prime Video, Hulu, and Disney+ —- and the programs that have been present on the site throughout roughly the past two decades. Specifically, we use rankings developed by Rotten Tomatoes and hypothesis testing to approach two research questions:\nRQ1: “Is the quality of exclusive shows different from non-exclusive shows across platforms?”\nRQ2: “Are exclusive shows’ ratings different between the four platforms (Netflix, Hulu, Disney+, and Prime Video)?”\nOur tv_shows dataset was taken from Kaggle and originally contained the following variables: ID , Title, Year, Age, IMDb, Rotten Tomatoes, Netflix, Hulu, Prime Video, Disney+, and Type.The original dataset contains 12 columns and 5368 observations. Each of the variables above were used to describe an observation of a television show featured on the four platforms we’re analyzing. In our data cleaning process, we made some of the variables easier to understand; in the Netflix, Hulu, Prime Video, Disney+ variables, we changed 0 or 1 binary results to “Yes” or “No” depending on whether a certain show is present on each platform. Additionally, we mutated the data to add four columns: exclusive_netflix, exclusive_prime_video, exclusive_disney_plus, and exclusive_hulu, which contains “TRUE” or “FALSE” data to indicate whether an observation is exclusively seen on the platform at hand. Finally, we removed the ‘%’ in the Rotten Tomatoes score and converted the values to integers to make them easier to use in our analysis.\nAfter conducting two hypothesis tests and interpreting the results (including the p-value, point-estimate, and confidence interval values), we were able to determine a few conclusions with respect to the research questions above. Regarding the first hypothesis, we were able to reject the null hypothesis and were in favor of the alternative hypothesis. This means that the first hypothesis test provides convincing evidence that the average quality of exclusive shows (measured by Rotten Tomatoes scores) is greater than the average quality of non-exclusive shows (measured by Rotten Tomatoes scores) across all platforms. In terms of the second research question, our findings were in favor of the alternate hypothesis: there is some sort of difference in ratings between the exclusive shows on each of the four platforms.\n\n\nData description\nThe observations (rows) of the tvshows dataset represent each individual TV show that is readily watched and broadcasted on at least one of the four top ranking broadcasting platforms (we are focusing on Hulu, Disney+, Prime Video and Netflix). The attributes (columns) of the tvshows data set categorizes each individual TV show based on the streaming platform it’s being broadcasted on and reveals additional information. This includes revealing the year the TV show was produced, target age group of audience, and the rating of the show (by the Rotten Tomatoes metric).\nThis data set was created by the curator after being inspired by personal experiences of wanting to know more about which streaming platform(s) a particular TV show can be found on. Furthermore, the curator wished to explore potential relationships between target age group of audience, year of production, and the streaming platform the show can be found on. The creation of the tvshows dataset was not funded by anyone and was curated solely with the desire to learn more about tv shows readily broadcasted on top streaming platforms. Specifically, the curator likely looked at TV shows broadcasted on each streaming platform to determine which Rotten Tomatoes ratings to include within the dataset and determine which year of production data as well as target age of audience should be included.\nIn regards to the pre-processing of the data, the Rotten Tomatoes score itself needed to undergo specific calculations before the curator is able to scrape the Rotten Tomatoes score for the corresponding TV shows. To summarize, the Rotten Tomatoes score is calculated only when the show receives at least 5 reviews. Then, the critic’s rating of “Fresh” (positive) or “Rotten” bad is collected and the Rotten Tomatoes percentage is calculated by dividing the number of “Fresh” scores by the total number of “Fresh” and “Rotten” scores times 100. In addition, the curator then used a binary system (0 for “no” and 1 for “yes”) to classify which streaming platform(s) each TV show can be found on.\nThe curator did not involve any other people during the data collection and likely collected the data from official sites that reported the taken corresponding data values. At the same time, the Rotten Tomatoes data values inherently involve people as the score is reliant on people’s opinions and rating of the show. From this perspective, the people are likely aware of this data collection as they are displaying their ratings of the tv shows in a public domain. They likely expected their data to be used to contribute to the overall rating of the TV show and used to inform others on whether they should watch the respective TV show.\n\n\nData analysis\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n── Attaching packages ────────────────────────────────────── tidymodels 1.0.0 ──\n\n✔ broom        1.0.4     ✔ rsample      1.1.1\n✔ dials        1.1.0     ✔ tune         1.1.1\n✔ infer        1.0.4     ✔ workflows    1.1.2\n✔ modeldata    1.0.1     ✔ workflowsets 1.0.0\n✔ parsnip      1.0.3     ✔ yardstick    1.2.0\n✔ recipes      1.0.6     \n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nLoading required package: viridisLite\n\n\nAttaching package: 'viridis'\n\n\nThe following object is masked from 'package:scales':\n\n    viridis_pal\n\n\nNew names:\nRows: 5368 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Title, Age, IMDb, Rotten Tomatoes\ndbl (8): ...1, ID, Year, Netflix, Hulu, Prime Video, Disney+, Type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n# A tibble: 5,368 × 16\n    ...1    ID Title            Year Age   IMDb  `Rotten Tomatoes` Netflix Hulu \n   <dbl> <dbl> <chr>           <dbl> <chr> <chr>             <int> <chr>   <chr>\n 1     0     1 Breaking Bad     2008 18+   9.4/…               100 Yes     No   \n 2     1     2 Stranger Things  2016 16+   8.7/…                96 Yes     No   \n 3     2     3 Attack on Titan  2013 18+   9.0/…                95 Yes     Yes  \n 4     3     4 Better Call Sa…  2015 18+   8.8/…                94 Yes     No   \n 5     4     5 Dark             2017 16+   8.8/…                93 Yes     No   \n 6     5     6 Avatar: The La…  2005 7+    9.3/…                93 Yes     No   \n 7     6     7 Peaky Blinders   2013 18+   8.8/…                93 Yes     No   \n 8     7     8 The Walking De…  2010 18+   8.2/…                93 Yes     No   \n 9     8     9 Black Mirror     2011 18+   8.8/…                92 Yes     No   \n10     9    10 The Queen's Ga…  2020 18+   8.6/…                92 Yes     No   \n# ℹ 5,358 more rows\n# ℹ 7 more variables: `Prime Video` <chr>, `Disney+` <chr>, Type <dbl>,\n#   exclusive_netflix <lgl>, exclusive_hulu <lgl>, exclusive_prime_video <lgl>,\n#   exclusive_disney_plus <lgl>\n\n\n[1] 1761\n\n\n[1] 1334\n\n\n[1] 1597\n\n\n[1] 306\n\n\n# A tibble: 5,368 × 16\n    ...1    ID Title            Year Age   IMDb  `Rotten Tomatoes` Netflix Hulu \n   <dbl> <dbl> <chr>           <dbl> <chr> <chr>             <int> <chr>   <chr>\n 1     0     1 Breaking Bad     2008 18+   9.4/…               100 Yes     No   \n 2     1     2 Stranger Things  2016 16+   8.7/…                96 Yes     No   \n 3     2     3 Attack on Titan  2013 18+   9.0/…                95 Yes     Yes  \n 4     3     4 Better Call Sa…  2015 18+   8.8/…                94 Yes     No   \n 5     4     5 Dark             2017 16+   8.8/…                93 Yes     No   \n 6     5     6 Avatar: The La…  2005 7+    9.3/…                93 Yes     No   \n 7     6     7 Peaky Blinders   2013 18+   8.8/…                93 Yes     No   \n 8     7     8 The Walking De…  2010 18+   8.2/…                93 Yes     No   \n 9     8     9 Black Mirror     2011 18+   8.8/…                92 Yes     No   \n10     9    10 The Queen's Ga…  2020 18+   8.6/…                92 Yes     No   \n# ℹ 5,358 more rows\n# ℹ 7 more variables: `Prime Video` <chr>, `Disney+` <chr>, Type <dbl>,\n#   exclusive_netflix <lgl>, exclusive_hulu <lgl>, exclusive_prime_video <lgl>,\n#   exclusive_disney_plus <lgl>\n\n\n\n\n`summarise()` has grouped output by 'decile'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n# A tibble: 5 × 5\n  term             estimate std.error statistic   p.value\n  <chr>               <dbl>     <dbl>     <dbl>     <dbl>\n1 (Intercept)       35.5        0.937   37.8    8.27e-278\n2 NetflixYes        17.0        0.929   18.3    1.01e- 72\n3 HuluYes           15.8        0.891   17.7    2.07e- 68\n4 `Prime Video`Yes  -0.0767     0.920   -0.0834 9.34e-  1\n5 `Disney+`Yes      11.9        1.26     9.43   5.70e- 21\n\n\nFraction of shows that are in a given rating interval for each platform:\nThe graph titled Fraction of shows that are in a given rating interval for each platform is a normalized frequency bar chart where every bar has the same height so that each bar represents the proportion of each rating (in our case: rotten tomatoes score) interval for a given platform. This allows us to normalize the number of shows in each platform and reduce the bias of different platforms having different number of shows. In this graph, the y-axis represents the fraction of shows (compared to the overall number of shows) rather than the actual number of shows on each platform. This allows us to compare the rotten tomato scores of shows of each platform as well as across all the platforms. The x-axis represents the rotten tomato score intervals (decided) that we chose to categorize and group the shows based on.\nBased on the graph we can deduce that Hulu and Netflix have equally large proportion of shows ranked between 91 and 100 on rotten tomatoes. Prime Video has the third largest proportion of shows in that interval of rotten tomatoes scores, followed by the last platform, which is Disney+. The same tendency is consistent for rotten tomatoes score intervals 51-60, 61-70, 71-80, and 81-90 rotten tomatoes score intervals. The proportion of shows that have the lowest rotten tomatoes score is the largest for Prime Video. Shows ranked within the interval of 1-10 are mostly streamed on Prime Video. In general, it seems like Netflix and Hulu have the largest proportion of shows that are ranked relatively high on rotten tomatoes, meanwhile Prime Video has the largest proportion of shows that are ranked the lowest on rotten tomatoes.\nRatings of Streamed Shows by Platform:\nThis graph shows boxplots that represent the distribution of rotten tomatoes scores of shows on each platform. The heights of the boxplots represent the diversity of data points (in this case rotten tomatoes scores) on each platform. The rotten tomatoes scores of shows in Disney+ are the most consistent across all the shows and are similar to each other with the median rotten tomatoes score being 50 (indicated by the horizontal line). The same is true for scores of shows streaming on Netflix. On the other hand, because the boxplot for shows streaming on Prime Video is well spread out across the y-axis, meaning its IQR is large, the scores for the shows streaming on Prime Video have varying range and are not consistent or similar across all the shows on the platform. This also means that even though there is a mean value of around 40, we cannot make meaningful conclusions about Prime Video show scores that would be relevant and valid for all the shows across the platform. This said, comparatively it seems that Hulu has the highest median score for its shows.\nMean Ratings of Streamed Shows by Platform\nThis graph shows the mean rotten tomatoes score of shows per platform. Netflix and Hulu seem to have almost the same mean rotten tomatoes score with Netflix slightly dominating. On the third place with rotten tomatoes score is Disney+, which is followed by Prime Vide that has the lowest mean score for shows streaming on it.\nOverall, these exploratory data visualizations show that there is a difference between rotten tomatoes scores for shows on different platforms. Moving forward we explore the possible factors (exclusivity of the shows to each platform) that might affect these differences.\n\n\nEvaluation of significance\n\nFirst Analysis: Hypothesis Test\nResearch Question: Is the quality of exclusive shows different from non-exclusive shows across all streaming platforms?\nNull Hypothesis: The average Rotten Tomatoes score of exclusive shows is less than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.\n\\[\nH_0: \\mu_{exclusive} < \\mu_{non-exclusive}\n\\]\nAlternative Hypothesis: The average Rotten Tomatoes score of exclusive shows is greater than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.\n\\[\nH_0: \\mu_{exclusive} > \\mu_{non-exclusive}\n\\]\n\n\nResponse: rotten_tomatoes (numeric)\nExplanatory: exclusivity (factor)\n# A tibble: 1 × 1\n   stat\n  <dbl>\n1 -1.14\n\n\n# A tibble: 1 × 1\n  p_value\n    <dbl>\n1   0.001\n\n\n\n\n\n# A tibble: 1 × 2\n  lower_ci upper_ci\n     <dbl>    <dbl>\n1    -1.72   -0.508\n\n\nSecond Analysis: Hypothesis Test\nResearch Question: Are exclusive shows’ ratings different between the four platforms (Netflix, Hulu, Disney+, and Prime Video)?\nNull Hypothesis: There is no difference in quality of the exclusive shows between the four platforms.\n\\[\nH_0: μ1 = μ2 = μ3 = μ4\n\\]\nAlternate Hypothesis: There is a difference in quality of the exclusive shows between the four platforms.\n\\[\nH_A: μ1 ≠ μ2 ≠ μ3 ≠ μ4\n\\]\n\n\n# A tibble: 4 × 2\n  term                       estimate\n  <chr>                         <dbl>\n1 intercept                     52.7 \n2 showsexclusive_disney_plus    -4.60\n3 showsexclusive_hulu           -1.56\n4 showsexclusive_prime_video   -17.9 \n\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\nWarning: Please be cautious in reporting a p-value of 0. This result is an\napproximation based on the number of `reps` chosen in the `generate()` step. See\n`?get_p_value()` for more information.\n\n\n# A tibble: 4 × 2\n  term                       p_value\n  <chr>                        <dbl>\n1 intercept                     0   \n2 showsexclusive_disney_plus    0   \n3 showsexclusive_hulu           0.02\n4 showsexclusive_prime_video    0   \n\n\n# A tibble: 4 × 3\n  term                       lower_ci upper_ci\n  <chr>                         <dbl>    <dbl>\n1 intercept                     52.0    53.5  \n2 showsexclusive_disney_plus    -6.41   -2.77 \n3 showsexclusive_hulu           -2.81   -0.310\n4 showsexclusive_prime_video   -19.0   -16.6  \n\n\nWarning: F usually corresponds to right-tailed tests. Proceed with caution.\n\n\nWarning: F usually corresponds to right-tailed tests. Proceed with caution.\n\nWarning: F usually corresponds to right-tailed tests. Proceed with caution.\n\nWarning: F usually corresponds to right-tailed tests. Proceed with caution.\n\n\n\n\n\n\n\n\nInterpretation and conclusions\nHypothesis #1: Point-Estimate\nThe point estimate -1.141822 represents, on average, the estimated difference of mean Rotten Tomatoes ratings between exclusive shows (to only one platform) and non exclusive shows across all four platforms.\nHypothesis #1: Confidence Interval\nThe 95% confidence interval [-1.78, -0.500] represents that we can be 95% confident that the difference in average Rotten Tomato rating between exclusive and non-exclusive shows across all platforms observed in the real population falls into the observed range of the confidence interval.\nAdditionally, since the bootstrapped confidence interval [-1.78, -0.500] does not include 0 in its interval, we can confidently rule out the possibility that exclusive shows across all platforms do not have a significant influence on Rotten Tomatoes ratings. In other words, since the confidence interval does not include 0, this suggests that the difference in average Rotten Tomato ratings between exclusive and non-exclusive shows is statistically significant and that exclusive shows has a significant influence on average Rotten Tomatoes ratings.\nHypothesis #1: P-Values\nThe calculated p-value for the difference in mean Rotten Tomato ratings between exclusive and non-exclusive shows across all 4 platforms is approximately 0.001. Since this calculated p-value is smaller than the significance level indicated by \\(\\alpha\\) = 0.05, we are able to reject the null hypothesis (the average Rotten Tomatoes score of exclusive shows is less than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.). In other words, there was convincing evidence that would favor the alternative hypothesis which indicates that the average Rotten Tomatoes score of exclusive shows is greater than the average Rotten Tomatoes score of non-exclusive shows across all four platforms.\nHypothesis #1: Simulation-Based Null Distributions Visualization\nThe visualization displays the null distribution and the p-value (shown by the red line). Specifically, the null distribution displayed represents the distribution of the difference of mean Rotten Tomatoes scores between exclusive and non-exclusive shows under the assumption that the null hypothesis is true. Based on the visualization, the p-value is found on the left of the null distribution. Since a one-tailed test was conducted, the critical region is found on the left side of the null distribution. This then indicates that the observed test statistic (the difference in mean Rotten Tomatoes scores) falls within the critical region. This means that the difference in mean Rotten Tomatoes scores is smaller than what would be expected under the null hypothesis. This also means the observed data is unlikely to have occurred by chance alone, assuming the null hypothesis is true. Thus, correspondingly, the p-value will be a very small value and would overall provide evidence in support of the alternative hypothesis: the difference in mean Rotten Tomato ratings between exclusive and non-exclusive shows across all platforms is statistically significant in the direction specified by the alternative hypothesis (the average Rotten Tomatoes score of exclusive shows is greater than the average Rotten Tomatoes score of non-exclusive shows across all four platforms).\nHypothesis #2: Point Estimate\nThe intercept 52.747303 represents, on average, the Rotten Tomatoes score for exclusive Netflix shows.\nThe estimated Rotten Tomatoes score for exclusive Disney plus shows, on average, will be 4.600244 less than the exclusive Netflix shows Rotten Tomatoes score. The estimated Rotten Tomatoes score for exclusive Hulu shows, on average, will be 1.556898 less than the exclusive Netflix shows Rotten Tomatoes score. The estimated Rotten Tomatoes score for exclusive Prime video shows, on average, will be 17.856883 less than the exclusive Netflix shows Rotten Tomatoes score.\nHypothesis #2: Confidence Intervals\nThe 95% confidence intervals for observing the estimated Rotten Tomatoes scores for shows exclusive to either Hulu, Disney+, or Prime Video are\n\n[-6.406644, -2.7691091] for exclusive_disney_plus\n[-2.813665, -0.3103026] for exclusive_hulu\n[-19.043264, -16.124430] for exclusive_prime_video\n\nSince all the above confidence intervals include 0 within their interval, we cannot confidently rule out the possibility that shows exclusive to either Hulu, Disney+, or Prime Video do not have a significant influence on Rotten Tomatoes ratings; we cannot be confident that the estimated scores for these streaming platforms are statistically different from 0.\nThe 95% confidence interval [52.019703, 53.415572] for the intercept (which represents the exclusive_netflix column) shows that we can be confident that the estimated Rotten Tomato score for exclusive Netflix shows is within the given confidence interval range.\nHypothesis #2: P-Values\nThe intercept p-value is 0.001 which represents the p-value for exclusive Netflix shows. For exclusive shows on Prime Video and Disney Plus, we calculated a p-value of 0.001 whereas exclusive shows on Hulu had a p-value of 0.02. Since the p-values for exclusive shows on all 4 platforms are less than the significance level indicated by \\(\\alpha\\) = 0.05, we are able to reject the null hypothesis (there is no difference in quality of the exclusive shows between the four platforms). This means that there was convincing evidence that would favor the alternative hypothesis which indicates that there is a difference in quality of the exclusive shows between the four platforms (measured through Rotten Tomatoes scores).\nHypothesis #2: Simulation-Based Null Distributions Visualization\nThe visualizations of exclusive_disney_plus, exclusive_prime_video, exclusive_hulu, and the intercept display the null distribution in reference to the p-value (the red line). A null distribution that is far from the p-value (as seen in exclusive_prime_video, exclusive_disney_plus, and the intercept) indicates that the observed difference in ratings between the four platforms is larger than what would be expected under the null hypothesis. Hence, the p-value is small because the observed difference is unlikely to be due to chance. Additionally, we can also reasonably say that, in the case of exclusive_hulu, because the red line is on the edge of the graph, it likely means that the p-value is very small; similarly to what was previously mentioned, this thus indicates that the observed difference is unlikely to be due to chance if the null hypothesis were true. Hence, this suggests strong evidence against the null hypothesis in favor of the alternate hypothesis.\nExtra Note:\nWe recognize that, in interpreting our results, a post-hoc analysis might’ve been beneficial to use in addition to an ANOVA test to more accurately draw conclusions from our data. In that case, the ANOVA (Analysis of Variance), would be used to test whether there are statistically significant differences between the means of two or more groups (i.e. between exclusive_disney_plus, exclusive_prime_video, exclusive_hulu, and the exclusive_netflix). If a significant difference is found, a post-hoc test like Tukey’s HSD (Honestly Significant Difference) would be utilized to determine which groups in particular are significantly different from each other. However, due to the fact that this was not included in the scope of this course, we decided to omit these tests and instead only perform our traditional hypothesis tests, as seen above.\nConclusions In the context of our overall analysis of the streaming wars between the most popular streaming platforms in our current pop culture, our hypothesis testing indicates that there\n\n\nLimitations\nThe first limitation is that our study right now just focuses on the quality of exclusive shows based on their rating scores (Rotten Tomatoes), which may not be a comprehensive measure of the quality of exclusive shows or non-exclusive shows on each platform. The analysis’s focus on Rotten Tomatoes ratings alone may not fully capture the perceived quality of exclusive shows on each platform. Moreover, considering the ratings of exclusive shows and not non-exclusive shows could limit the overall understanding of the quality of each platform’s content.\nThe second limitation is that we could not find any reliable and consistent dataset for the popularity, preferences, viewerships, viewing rates, or the number of subscribers of each platform, which could also affect the audiences’ perceived quality and critical reception, limiting our study to find the relationship between the quality of exclusive shows or non-exclusive shows and the preference of platforms. This is a result of the competitiveness in the streaming industry. Companies’ revenue almost entirely depends on subscriptions, and some of them are less active in publishing them. Additionally, some of the viewership data we find are using different metrics and, therefore, cannot be used to generate inferences. We can try to find a more comprehensive dataset that includes more variables which we could include in our analysis to reduce bias of confounding variables in hypothesis testing. We could also join dataset with those information.\nThe third limitation of our study is that there are unbalanced amounts of exclusive shows on each platform; for example, Netflix has significantly larger data of exclusive shows compared to the other platforms, which may affect the overall quality comparison between platforms. Disney Plus is a relatively new platform and has a smaller library of exclusive shows, which may limit the analysis. These unbalanced amounts of exclusive shows on each platform may introduce bias and affect the conclusions we can draw from our analyses.\nThe fourth limitation is that our analysis plan uses tomato scores to represent quality. This definition could have some biases. Firstly, the tomato score is a critics rating rather than an audience rating. Many movies and shows have a target audience that is better or worse represented than the other. Critics might inadvertently bring bias into their rating, and subsequently, our definition of quality could be biased as well. In addition, some shows that are watched by fewer people are less rated with tomato score, making the score easily influenced by a few critics, and therefore create bias in the definition of quality.\nThe fifth limitation is that our analysis does not account for the different types or genres of exclusive shows on each platform, such as comedies, documentaries, actions, etc., which may have different average ratings. We would have better insights if we had more data about the genres to compare shows of similar types across platforms rather than just looking at the overall average ratings.\nThe sixth limitation is that we do not take into account the number of views of each show across all platforms. This is a crucial factor in determining the quality of both exclusive and non-exclusive shows, as it can be a game-changer along with ratings. Many viewers may not rate a show after watching it, so the number of views plays an important role in determining if a show is popular or not, which affects its quality since quality is not solely determined by ratings.\n\nThe seventh limitation is that our data does not include the cost of subscription for each platform. For example, suppose a particular platform has a higher subscription cost. In that case, viewers may have higher expectations for the quality of the content they are paying for and may be more likely to rate shows negatively if they feel they are not getting their money’s worth. Alternatively, if a platform has a lower subscription cost, viewers may be more forgiving of lower-quality content or may rate shows more positively if they feel they are getting a good deal. Additionally, subscription costs can also impact the target audience of a particular platform, as viewers with different budgets may be more likely to subscribe to platforms with lower costs. Overall, it’s important to consider the cost of subscriptions when analyzing the quality of shows across different platforms.\nMoreover, there are some other possible variables to consider in the study. The first one is release dates. Media critics have varied opinion on whether the movie/show release year has an relationship with quality or scores of a show. Setting this aside, another way the release date could impact our study is that eariler realsed shows could have a lower possibility of being exclusive, because media exclusiveness isn’t prevalent before Netflix decided to produce its own shows. Therefore, the release year could have an impact on both the exclusiveness and their quality. Similarly, the production budget for each show could be confounding as well, because exclusive shows typically require more budget to produce than non-exclusive shows. Shows with more budget could also provide a better visual experience/hire better actors and thus have an impact on tomato scores. We tried to account these factors but each platforms have a different policy of releasing their data and many of the data aren’t typically released to outside the companies.\n\n\nAcknowledgments\nThanks to this user who published the dataset we are using on Kraggle:\nhttps://www.kaggle.com/datasets/ruchi798/tv-shows-on-netflix-prime-video-hulu-and-disney"
  }
]