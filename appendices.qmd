---
title: "Phenomenal Eevee"
subtitle: "Appendices to Report"
format: html
editor: visual
execute:
  echo: true
---

# Appendix

Our `tv_shows` dataset was taken from Kaggle and originally contained the following variables: `ID` , `Title`, `Year`, `Age`, `IMDb`, `Rotten Tomatoes`, `Netflix`, `Hulu`, `Prime Video`, `Disney+`, and `Type.`The original dataset contains 12 columns and 5368 observations. Each of the variables above were used to describe an observation of a television show featured on the four platforms we're analyzing. In our data cleaning process, we made some of the variables easier to understand; in the `Netflix`, `Hulu`, `Prime Video`, `Disney+` variables, we changed 0 or 1 binary results to "Yes" or "No" depending on whether a certain show is present on each platform. Additionally, we mutated the data to add four columns: `exclusive_netflix`, `exclusive_prime_video`, `exclusive_disney_plus,` and `exclusive_hulu`, which contains "TRUE" or "FALSE" data to indicate whether an observation is exclusively seen on the platform at hand. Finally, we removed the '%' in the `Rotten Tomatoes` score and converted the values to integers to make them easier to use in our analysis.

After conducting two hypothesis tests and interpreting the results (including the p-value, point-estimate, and confidence interval values), we were able to determine a few conclusions with respect to the research questions above. Regarding the first hypothesis, we were able to reject the null hypothesis and were in favor of the alternative hypothesis. This means that the first hypothesis test provides convincing evidence that the average quality of exclusive shows (measured by Rotten Tomatoes scores) is greater than the average quality of non-exclusive shows (measured by Rotten Tomatoes scores) across all platforms. In terms of the second research question, our findings were in favor of the alternate hypothesis: there is some sort of difference in ratings between the exclusive shows on each of the four platforms.

The observations (rows) of the `tvshows` dataset represent each individual TV show that is readily watched and broadcasted on at least one of the four top ranking broadcasting platforms (we are focusing on Hulu, Disney+, Prime Video and Netflix). The attributes (columns) of the `tvshows` dataset categorizes each individual TV show based on the streaming platform it's being streamed on and reveals additional information. This includes revealing the year the TV show was produced, target age group of audience, and the rating of the show (by the Rotten Tomatoes metric). This dataset was created by the curator after being inspired by personal experiences of wanting to know more about which streaming platform(s) a particular TV show can be found on. Furthermore, the curator wished to explore potential relationships between target age group of audience, year of production, and the streaming platform the show can be found on. The creation of the `tvshows` dataset was not funded by anyone and was curated solely with the desire to learn more about tv shows readily broadcasted on top streaming platforms. Specifically, the curator likely looked at TV shows broadcasted on each streaming platform to determine which Rotten Tomatoes ratings to include within the dataset and determine which year of production data as well as target age of audience should be included.

As previously mentioned, the processes that might have influenced which TV shows and relevant information that was and wasn't observed/recorded involved a combination of the curator's personal experiences with TV shows and the observed streaming platforms. Specifically, the curator must have had some interest, interaction or experience with the streaming platforms or specific TV shows to have wanted to focus the observations of the dataset to include just TV shows from specific streaming platforms ( Netflix, Hulu, Disney Plus and Prime Video). Also, the availability of the TV show on these platforms influenced whether a particular show was included in the dataset as shows not available on the aforementioned platforms wouldn't be observed or recorded. Finally, the availability of the information about the show (i.e., target age, year of production, Rotten Tomatoes ratings, etc.) would have influenced whether certain shows were included in the dataset or whether the show would be included with NA values in place of where this information is recorded in the dataset.

In regards to the preprocessing of the data, the Rotten Tomatoes score itself needed to undergo specific calculations before the curator is able to scrape the Rotten Tomatoes score for the corresponding TV shows. To summarize, the Rotten Tomatoes score is calculated only when the show receives at least 5 reviews. Then, the critic's rating of "Fresh" (positive) or "Rotten" bad is collected and the Rotten Tomatoes percentage is calculated by dividing the number of "Fresh" scores by the total number of "Fresh" and "Rotten" scores times 100. In addition, the curator then used a binary system (0 for "no" and 1 for "yes") to classify which streaming platform(s) each TV show can be found on.

The curator did not involve any other people during the data collection and likely collected the data from official sites that reported the taken corresponding data values. At the same time, the Rotten Tomatoes data values inherently involve people as the score is reliant on people's opinions and rating of the show. From this perspective, the people are likely aware of this data collection as they are displaying their ratings of the tv shows in a public domain. They likely expected their data to be used to contribute to the overall rating of the TV show and used to inform others on whether they should watch the respective TV show.

```{r}
#| label: data-cleaning-for-exclusivity

# loading packages
library(tidyverse)
library(tidymodels)
library(dplyr)
tv_shows <- read_csv(file = "data/tv_shows.csv")

# replacing binary numbers to "yes" if streaming, "no" if not
tv_shows_cleaned <- tv_shows |>
  mutate(Netflix = if_else(Netflix == 1, "Yes", "No"), 
         Hulu = if_else(Hulu == 1, "Yes", "No"),
         `Prime Video` = if_else(`Prime Video` == 1, "Yes", "No"),
         `Disney+` = if_else(`Disney+` == 1, "Yes", "No"),
         `Rotten Tomatoes` = str_remove(`Rotten Tomatoes`, "/100"),
         `Rotten Tomatoes` = parse_integer(`Rotten Tomatoes`)) 

# marking exclusive shows
tv_shows_cleaned|>
  mutate(exclusive_netflix = Netflix == "Yes" & Hulu == "No" & `Prime Video` == "No" & `Disney+` == "No",
         exclusive_hulu = Hulu == "Yes" & Netflix == "No" & `Prime Video` == "No" & `Disney+` == "No",
         exclusive_prime_video = `Prime Video` == "Yes" & Netflix == "No" & Hulu == "No" & `Disney+` == "No",
         exclusive_disney_plus = `Disney+` == "Yes" & Netflix == "No" & Hulu == "No" & `Prime Video` == "No")

# print the cleaned data frame
tv_shows_cleaned

# count exclusive shows to each platform
num_netflix_exclusive <- sum(tv_shows_cleaned$exclusive_netflix == TRUE)
num_hulu_exclusive <- sum(tv_shows_cleaned$exclusive_hulu == TRUE)
num_prime_video_exclusive <- sum(tv_shows_cleaned$exclusive_prime_video == TRUE)
num_disney_plus_exclusive <- sum(tv_shows_cleaned$exclusive_disney_plus == TRUE)

# print the number of exlusive shows to each platform
num_netflix_exclusive
num_hulu_exclusive
num_prime_video_exclusive
num_disney_plus_exclusive
```

```{r}
#| label: explaratory-data-analysis

# make a copy of the cleaned data frame
tv_shows_cleaned_copy <- tv_shows_cleaned

# filter only shows streaming on Netflix
netflix <- filter(tv_shows_cleaned_copy, Netflix == "Yes")
names(netflix)[7] <- "rotten_tomatoes"

# categorize score intervals into deciles
netflix <- netflix |>
  select(Title, rotten_tomatoes) |>
  mutate(mean = mean(rotten_tomatoes)) |>
  mutate(platform = 'netflix') |>
  mutate(decile = 100) |>
  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, 
                         '1-10', decile)) |>
  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, 
                         '11-20', decile)) |>
  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, 
                         '21-30', decile)) |>
  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, 
                         '31-40', decile)) |>
  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, 
                         '51-60', decile)) |>
  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, 
                         '61-70', decile)) |>
  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, 
                         '71-80', decile)) |>
  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, 
                         '81-90', decile)) |>
  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, 
                         '91-100', decile))

# filter only the Hulu shows  
hulu <- filter(tv_shows_cleaned_copy, Hulu == "Yes")
names(hulu)[7] <- "rotten_tomatoes"

# categorize score intervals into deciles
hulu <- hulu |>
  select(Title, rotten_tomatoes) |>
  mutate(mean = mean(rotten_tomatoes)) |>
  mutate(platform = 'hulu') |>
  mutate(decile = 100) |>
  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, 
                         '1-10', decile)) |>
  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, 
                         '11-20', decile)) |>
  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, 
                         '21-30', decile)) |>
  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, 
                         '31-40', decile)) |>
  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, 
                         '51-60', decile)) |>
  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, 
                         '61-70', decile)) |>
  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, 
                         '71-80', decile)) |>
  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, 
                         '81-90', decile)) |>
  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, 
                         '91-100', decile))

# filter only shows streaming on Prime Video
names(tv_shows_cleaned_copy)[10] <- "prime_video"
prime <- filter(tv_shows_cleaned_copy, prime_video == "Yes")
names(prime)[7] <- "rotten_tomatoes"

# categorize score intervals into deciles
prime <- prime |>
  select(Title, rotten_tomatoes) |>
  mutate(mean = mean(rotten_tomatoes)) |>
  mutate(platform = 'prime') |>
  mutate(decile = 100) |>
  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, 
                         '1-10', decile)) |>
  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, 
                         '11-20', decile)) |>
  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, 
                         '21-30', decile)) |>
  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, 
                         '31-40', decile)) |>
  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, 
                         '51-60', decile)) |>
  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, 
                         '61-70', decile)) |>
  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, 
                         '71-80', decile)) |>
  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, 
                         '81-90', decile)) |>
  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, 
                         '91-100', decile))

# filter shows streaming on Netflix
names(tv_shows_cleaned_copy)[11] <- "disney_plus"
disney <- filter(tv_shows_cleaned_copy, disney_plus == "Yes")
names(disney)[7] <- "rotten_tomatoes"

# categorize score intervals into deciles
disney <- disney |>
  select(Title, rotten_tomatoes) |>
  mutate(mean = mean(rotten_tomatoes)) |>
  mutate(platform = 'disney') |>
  mutate(decile = 100) |>
  mutate(decile = ifelse(0<=rotten_tomatoes & rotten_tomatoes <=10, 
                         '1-10', decile)) |>
  mutate(decile = ifelse(10<rotten_tomatoes & rotten_tomatoes <=20, 
                         '11-20', decile)) |>
  mutate(decile = ifelse(20<rotten_tomatoes & rotten_tomatoes <=30, 
                         '21-30', decile)) |>
  mutate(decile = ifelse(30<rotten_tomatoes & rotten_tomatoes <=40, 
                         '31-40', decile)) |>
  mutate(decile = ifelse(50<rotten_tomatoes & rotten_tomatoes <=60, 
                         '51-60', decile)) |>
  mutate(decile = ifelse(60<rotten_tomatoes & rotten_tomatoes <=70, 
                         '61-70', decile)) |>
  mutate(decile = ifelse(70<rotten_tomatoes & rotten_tomatoes <=80, 
                         '71-80', decile)) |>
  mutate(decile = ifelse(80<rotten_tomatoes & rotten_tomatoes <=90, 
                         '81-90', decile)) |>
  mutate(decile = ifelse(90<rotten_tomatoes & rotten_tomatoes <=100, 
                         '91-100', decile))

# add all the shows streaming for all 4 platforms together
total <- rbind(netflix, hulu)
total <- rbind(total,prime)
total <- rbind(total,disney)

# count the number of shows in each decile interval for rotten tomatoes score
total_per_platform <- total |>
  group_by(decile, platform) |>
  summarize(number = n())

# calculate the mean ranking of shows streaming on each platform
mean_rankings <- data.frame(platform = c('Netflix',
                                         'Hulu','Amazon Prime',
                                         'Disney'),
                            mean=c(netflix[[3]][1], hulu[[3]][1],
                                   prime[[3]][1],  disney[[3]][1]))

```

# `{r} # write_csv(x = tv_shows_cleaned, file = "~/project-phenomenal-evee/appendices.qmd") #`
